//
//  G3MWidget.cpp
//  G3MiOSSDK
//
//  Created by Jos√© Miguel S N on 31/05/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#include "G3MWidget.hpp"

#include "Renderer.hpp"
#include "Camera.hpp"
#include "GL.hpp"
#include "TexturesHandler.hpp"
#include "IDownloader.hpp"
#include "Effects.hpp"
#include "Context.hpp"
#include "ICameraConstrainer.hpp"
#include "FrameTasksExecutor.hpp"
#include "IStringUtils.hpp"
#include "IThreadUtils.hpp"
#include "IStringBuilder.hpp"
#include "IJSONParser.hpp"
#include "GLConstants.hpp"
#include "PeriodicalTask.hpp"
#include "CameraGoToPositionEffect.hpp"
#include "CameraRenderer.hpp"
#include "CPUTextureBuilder.hpp"
#include "IStorage.hpp"
#include "OrderedRenderable.hpp"
#include <math.h>
#include "GInitializationTask.hpp"
#include "ITextUtils.hpp"
#include "TouchEvent.hpp"
#include "GPUProgramManager.hpp"

#include "GLGlobalState.hpp"
#include "GPUProgramState.hpp"
#include "GLGlobalState.hpp"

#include "ICameraActivityListener.hpp"

void G3MWidget::initSingletons(ILogger*            logger,
                               IFactory*           factory,
                               const IStringUtils* stringUtils,
                               IStringBuilder*     stringBuilder,
                               IMathUtils*         mathUtils,
                               IJSONParser*        jsonParser,
                               ITextUtils*         textUtils) {
  if (ILogger::instance() == NULL) {
    ILogger::setInstance(logger);
    IFactory::setInstance(factory);
    IStringUtils::setInstance(stringUtils);
    IStringBuilder::setInstance(stringBuilder);
    IMathUtils::setInstance(mathUtils);
    IJSONParser::setInstance(jsonParser);
    ITextUtils::setInstance(textUtils);
  }
  else {
    ILogger::instance()->logWarning("Singletons already set");
  }
}

G3MWidget::G3MWidget(GL*                              gl,
                     IStorage*                        storage,
                     IDownloader*                     downloader,
                     IThreadUtils*                    threadUtils,
                     ICameraActivityListener*         cameraActivityListener,
                     const Planet*                    planet,
                     std::vector<ICameraConstrainer*> cameraConstrainers,
                     CameraRenderer*                  cameraRenderer,
                     Renderer*                        mainRenderer,
                     Renderer*                        busyRenderer,
                     Color                            backgroundColor,
                     const bool                       logFPS,
                     const bool                       logDownloaderStatistics,
                     GInitializationTask*             initializationTask,
                     bool                             autoDeleteInitializationTask,
                     std::vector<PeriodicalTask*>     periodicalTasks,
                     GPUProgramManager*               gpuProgramManager):
_frameTasksExecutor( new FrameTasksExecutor() ),
_effectsScheduler( new EffectsScheduler() ),
_gl(gl),
_downloader(downloader),
_storage(storage),
_threadUtils(threadUtils),
_cameraActivityListener(cameraActivityListener),
_texturesHandler( new TexturesHandler(_gl, false) ),
_textureBuilder( new CPUTextureBuilder() ),
_planet(planet),
_cameraConstrainers(cameraConstrainers),
_cameraRenderer(cameraRenderer),
_mainRenderer(mainRenderer),
_busyRenderer(busyRenderer),
_width(1),
_height(1),
_currentCamera(new Camera(_width, _height)),
_nextCamera(new Camera(_width, _height)),
_backgroundColor( new Color(backgroundColor) ),
_timer(IFactory::instance()->createTimer()),
_renderCounter(0),
_totalRenderTime(0),
_logFPS(logFPS),
_mainRendererReady(false), // false until first call to G3MWidget::render()
_selectedRenderer(NULL),
_renderStatisticsTimer(NULL),
_logDownloaderStatistics(logDownloaderStatistics),
_userData(NULL),
_initializationTask(initializationTask),
_autoDeleteInitializationTask(autoDeleteInitializationTask),
_context(new G3MContext(IFactory::instance(),
                        IStringUtils::instance(),
                        threadUtils,
                        ILogger::instance(),
                        IMathUtils::instance(),
                        IJSONParser::instance(),
                        _planet,
                        downloader,
                        _effectsScheduler,
                        storage)),
_paused(false),
_initializationTaskWasRun(false),
_initializationTaskReady(true),
_clickOnProcess(false),
_gpuProgramManager(gpuProgramManager)
{
  _effectsScheduler->initialize(_context);
  _cameraRenderer->initialize(_context);
  _mainRenderer->initialize(_context);
  _busyRenderer->initialize(_context);
  _currentCamera->initialize(_context);
  _nextCamera->initialize(_context);

  if (_threadUtils != NULL) {
    _threadUtils->initialize(_context);
  }

  if (_storage != NULL) {
    _storage->initialize(_context);
  }

  if (_downloader != NULL){
    _downloader->initialize(_context, _frameTasksExecutor);
    _downloader->start();
  }

  for (int i = 0; i < periodicalTasks.size(); i++) {
    addPeriodicalTask(periodicalTasks[i]);
  }
}


G3MWidget* G3MWidget::create(GL*                              gl,
                             IStorage*                        storage,
                             IDownloader*                     downloader,
                             IThreadUtils*                    threadUtils,
                             ICameraActivityListener*         cameraActivityListener,
                             const Planet*                    planet,
                             std::vector<ICameraConstrainer*> cameraConstrainers,
                             CameraRenderer*                  cameraRenderer,
                             Renderer*                        mainRenderer,
                             Renderer*                        busyRenderer,
                             Color                            backgroundColor,
                             const bool                       logFPS,
                             const bool                       logDownloaderStatistics,
                             GInitializationTask*             initializationTask,
                             bool                             autoDeleteInitializationTask,
                             std::vector<PeriodicalTask*>     periodicalTasks,
                             GPUProgramManager*               gpuProgramManager) {

  return new G3MWidget(gl,
                       storage,
                       downloader,
                       threadUtils,
                       cameraActivityListener,
                       planet,
                       cameraConstrainers,
                       cameraRenderer,
                       mainRenderer,
                       busyRenderer,
                       backgroundColor,
                       logFPS,
                       logDownloaderStatistics,
                       initializationTask,
                       autoDeleteInitializationTask,
                       periodicalTasks,
                       gpuProgramManager);
}

G3MWidget::~G3MWidget() {
  delete _userData;

  delete _planet;
  delete _cameraRenderer;
  delete _mainRenderer;
  delete _busyRenderer;
  delete _gl;
  delete _effectsScheduler;
  delete _currentCamera;
  delete _nextCamera;
  delete _texturesHandler;
  delete _timer;

  if (_downloader != NULL) {
    _downloader->stop();
    delete _downloader;
  }

  delete _storage;
  delete _threadUtils;
  delete _cameraActivityListener;

  for (unsigned int n=0; n < _cameraConstrainers.size(); n++) {
    delete _cameraConstrainers[n];
  }
  delete _frameTasksExecutor;

  for (int i = 0; i < _periodicalTasks.size(); i++){
    PeriodicalTask* periodicalTask =  _periodicalTasks[i];
    delete periodicalTask;
  }

  delete _context;
}

void G3MWidget::notifyTouchEvent(const G3MEventContext &ec,
                                 const TouchEvent* touchEvent) const {
  bool handled = false;
  if (_mainRenderer->isEnable()) {
    handled = _mainRenderer->onTouchEvent(&ec, touchEvent);
  }

  if (!handled) {
    handled = _cameraRenderer->onTouchEvent(&ec, touchEvent);
    if (handled) {
      if (_cameraActivityListener != NULL) {
        _cameraActivityListener->touchEventHandled();
      }
    }
  }
}

void G3MWidget::onTouchEvent(const TouchEvent* touchEvent) {
  if (_mainRendererReady) {
    G3MEventContext ec(IFactory::instance(),
                       IStringUtils::instance(),
                       _threadUtils,
                       ILogger::instance(),
                       IMathUtils::instance(),
                       IJSONParser::instance(),
                       _planet,
                       _downloader,
                       _effectsScheduler,
                       _storage);


    // notify the original event
    notifyTouchEvent(ec, touchEvent);


    // creates DownUp event when a Down is immediately followed by an Up
    if (touchEvent->getTouchCount() == 1) {
      const TouchEventType eventType = touchEvent->getType();
      if (eventType == Down) {
        _clickOnProcess = true;
      }
      else {
        if (eventType == Up) {
          if (_clickOnProcess) {

            const Touch* touch = touchEvent->getTouch(0);
            const TouchEvent* downUpEvent = TouchEvent::create(DownUp,
                                                               new Touch(*touch));

            notifyTouchEvent(ec, downUpEvent);

            delete downUpEvent;
          }
        }
        _clickOnProcess = false;
      }
    }
    else {
      _clickOnProcess = false;
    }

    
  }
}

void G3MWidget::onResizeViewportEvent(int width, int height) {
  if (_mainRendererReady) {
    G3MEventContext ec(IFactory::instance(),
                       IStringUtils::instance(),
                       _threadUtils,
                       ILogger::instance(),
                       IMathUtils::instance(),
                       IJSONParser::instance(),
                       _planet,
                       _downloader,
                       _effectsScheduler,
                       _storage);

    _nextCamera->resizeViewport(width, height);

    // _nextCamera->resizeViewport(width, height);

    _currentCamera->resizeViewport(width, height);
    _cameraRenderer->onResizeViewportEvent(&ec, width, height);

    if (_mainRenderer->isEnable()) {
      _mainRenderer->onResizeViewportEvent(&ec, width, height);
    }
  }
}


void G3MWidget::resetPeriodicalTasksTimeouts() {
  const int periodicalTasksCount = _periodicalTasks.size();
  for (int i = 0; i < periodicalTasksCount; i++) {
    PeriodicalTask* pt = _periodicalTasks[i];
    pt->resetTimeout();
  }
}

void G3MWidget::render(int width, int height) {
<<<<<<< HEAD

=======
  
>>>>>>> webgl-port
  if (_paused) {
    return;
  }

  if ((_width != width || _height != height) && _mainRendererReady) {
    _width = width;
    _height = height;

    onResizeViewportEvent(_width, _height);
  }

  _timer->start();
  _renderCounter++;
  

  
  if (_initializationTask != NULL) {
    if (!_initializationTaskWasRun) {
      _initializationTask->run(_context);
      _initializationTaskWasRun = true;
    }
    
    _initializationTaskReady = _initializationTask->isDone(_context);
    if (_initializationTaskReady) {
      if (_autoDeleteInitializationTask) {
        delete _initializationTask;
      }
      _initializationTask = NULL;
    }
  }

  // Start periodical tasks
  const int periodicalTasksCount = _periodicalTasks.size();
  for (int i = 0; i < periodicalTasksCount; i++) {
    PeriodicalTask* pt = _periodicalTasks[i];
    pt->executeIfNecessary(_context);
  }

  // give to the CameraContrainers the opportunity to change the nextCamera
  const int cameraConstrainersCount = _cameraConstrainers.size();
  for (int i = 0; i< cameraConstrainersCount; i++) {
    ICameraConstrainer* constrainer = _cameraConstrainers[i];
    constrainer->onCameraChange(_planet,
                                _currentCamera,
                                _nextCamera);
  }

  
  _nextCamera->forceMatrixCreation();
  
  _currentCamera->copyFrom(*_nextCamera);

  G3MRenderContext rc(_frameTasksExecutor,
                      IFactory::instance(),
                      IStringUtils::instance(),
                      _threadUtils,
                      ILogger::instance(),
                      IMathUtils::instance(),
                      IJSONParser::instance(),
                      _planet,
                      _gl,
                      _currentCamera,
                      _nextCamera,
                      _texturesHandler,
                      _textureBuilder,
                      _downloader,
                      _effectsScheduler,
                      IFactory::instance()->createTimer(),
                      _storage,
                      _gpuProgramManager);

  _mainRendererReady = _initializationTaskReady && _mainRenderer->isReadyToRender(&rc);

  int _TESTING_initializationTask;
//  if (_mainRendererReady) {
//    if (_initializationTask != NULL) {
//      if (!_initializationTaskWasRun) {
//        _initializationTask->run(_context);
//        _initializationTaskWasRun = true;
//      }
//
//      if (_initializationTask->isDone(_context)) {
//        if (_autoDeleteInitializationTask) {
//          delete _initializationTask;
//        }
//        _initializationTask = NULL;
//      }
//      else {
//        _mainRendererReady = false;
//      }
//    }
//  }
//
//  if (_mainRendererReady) {
//    _effectsScheduler->doOneCyle(&rc);
//  }
  _effectsScheduler->doOneCyle(&rc);
  	
  _frameTasksExecutor->doPreRenderCycle(&rc);

  Renderer* selectedRenderer = _mainRendererReady ? _mainRenderer : _busyRenderer;
  if (selectedRenderer != _selectedRenderer) {
    if (_selectedRenderer != NULL) {
      _selectedRenderer->stop(&rc);
    }
    _selectedRenderer = selectedRenderer;
    _selectedRenderer->start(&rc);
  }
<<<<<<< HEAD
  
  GLGlobalState state;
  state.setClearColor(_backgroundColor);
  _gl->clearScreen(state);
=======

  _gl->clearScreen(*_backgroundColor);
>>>>>>> webgl-port

  if (_mainRendererReady) {
    _cameraRenderer->render(&rc);
  }

  if (_selectedRenderer->isEnable()) {
    _selectedRenderer->render(&rc);
  }

  std::vector<OrderedRenderable*>* orderedRenderables = rc.getSortedOrderedRenderables();
  if (orderedRenderables != NULL) {
    const int orderedRenderablesCount = orderedRenderables->size();
    for (int i = 0; i < orderedRenderablesCount; i++) {
      OrderedRenderable* orderedRenderable = orderedRenderables->at(i);
      orderedRenderable->render(&rc);
      delete orderedRenderable;
    }
  }

  const TimeInterval elapsedTime = _timer->elapsedTime();
  if (elapsedTime.milliseconds() > 100) {
    ILogger::instance()->logWarning("Frame took too much time: %dms",
                                    elapsedTime.milliseconds());
  }

  if (_logFPS) {
    _totalRenderTime += elapsedTime.milliseconds();

    if ((_renderStatisticsTimer == NULL) ||
        (_renderStatisticsTimer->elapsedTime().seconds() > 2)) {
      const double averageTimePerRender = (double) _totalRenderTime / _renderCounter;
      const double fps = 1000.0 / averageTimePerRender;
      ILogger::instance()->logInfo("FPS=%f" , fps);

      _renderCounter = 0;
      _totalRenderTime = 0;

      if (_renderStatisticsTimer == NULL) {
        _renderStatisticsTimer = IFactory::instance()->createTimer();
      }
      else {
        _renderStatisticsTimer->start();
      }
    }
  }

  if (_logDownloaderStatistics) {
    std::string cacheStatistics = "";

    if (_downloader != NULL){
      cacheStatistics = _downloader->statistics();
    }

    if (cacheStatistics != _lastCacheStatistics) {
      ILogger::instance()->logInfo("%s" , cacheStatistics.c_str());
      _lastCacheStatistics = cacheStatistics;
    }
  }

}

void G3MWidget::onPause() {
  _paused = true;
  
  _threadUtils->onPause(_context);

  _effectsScheduler->onPause(_context);

  _mainRenderer->onPause(_context);
  _busyRenderer->onPause(_context);

  _downloader->onPause(_context);
  _storage->onPause(_context);
}

void G3MWidget::onResume() {
  _paused = false;
  
  _storage->onResume(_context);

  _downloader->onResume(_context);

  _mainRenderer->onResume(_context);
  _busyRenderer->onResume(_context);

  _effectsScheduler->onResume(_context);

  _threadUtils->onResume(_context);
}

void G3MWidget::onDestroy() {
  _threadUtils->onDestroy(_context);

  _effectsScheduler->onDestroy(_context);

  _mainRenderer->onDestroy(_context);
  _busyRenderer->onDestroy(_context);

  _downloader->onDestroy(_context);
  _storage->onDestroy(_context);
}

void G3MWidget::addPeriodicalTask(PeriodicalTask* periodicalTask) {
  _periodicalTasks.push_back(periodicalTask);
}

void G3MWidget::addPeriodicalTask(const TimeInterval& interval,
                                  GTask* task) {
  addPeriodicalTask( new PeriodicalTask(interval, task) );
}

void G3MWidget::setCameraHeading(const Angle& angle) {
  getNextCamera()->setHeading(angle);
}

void G3MWidget::setCameraPitch(const Angle& angle) {
  getNextCamera()->setPitch(angle);
}

void G3MWidget::setCameraPosition(const Geodetic3D& position) {
  getNextCamera()->setGeodeticPosition(position);
}

void G3MWidget::setAnimatedCameraPosition(const Geodetic3D& position,
                                          const Angle& heading,
                                          const Angle& pitch) {
  setAnimatedCameraPosition(TimeInterval::fromSeconds(3), position, heading, pitch);
}

void G3MWidget::setAnimatedCameraPosition(const TimeInterval& interval,
                                          const Geodetic3D& position,
                                          const Angle& heading,
                                          const Angle& pitch,
                                          const bool linearTiming,
                                          const bool linearHeight) {
  const Geodetic3D fromPosition = _nextCamera->getGeodeticPosition();
  const Angle fromHeading = _nextCamera->getHeading();
  const Angle fromPitch   = _nextCamera->getPitch();

  setAnimatedCameraPosition(interval,
                            fromPosition, position,
                            fromHeading,  heading,
                            fromPitch,    pitch,
                            linearTiming,
                            linearHeight);
}

void G3MWidget::setAnimatedCameraPosition(const TimeInterval& interval,
                                          const Geodetic3D& fromPosition,
                                          const Geodetic3D& toPosition,
                                          const Angle& fromHeading,
                                          const Angle& toHeading,
                                          const Angle& fromPitch,
                                          const Angle& toPitch,
                                          const bool linearTiming,
                                          const bool linearHeight) {
  double finalLatInDegrees = toPosition.latitude()._degrees;
  double finalLonInDegrees = toPosition.longitude()._degrees;

  //Fixing final latitude
  while (finalLatInDegrees > 90) {
    finalLatInDegrees -= 360;
  }
  while (finalLatInDegrees < -90) {
    finalLatInDegrees += 360;
  }

  //Fixing final longitude
  while (finalLonInDegrees > 360) {
    finalLonInDegrees -= 360;
  }
  while (finalLonInDegrees < 0) {
    finalLonInDegrees += 360;
  }
  if (fabs(finalLonInDegrees - fromPosition.longitude()._degrees) > 180) {
    finalLonInDegrees -= 360;
  }

  const Geodetic3D finalToPosition = Geodetic3D::fromDegrees(finalLatInDegrees,
                                                             finalLonInDegrees,
                                                             toPosition.height());

  stopCameraAnimation();

  _effectsScheduler->startEffect(new CameraGoToPositionEffect(interval,
                                                              fromPosition, finalToPosition,
                                                              fromHeading,  toHeading,
                                                              fromPitch,    toPitch,
                                                              linearTiming,
                                                              linearHeight),
                                 _nextCamera->getEffectTarget());
}

void G3MWidget::stopCameraAnimation() {
  EffectTarget* target = _nextCamera->getEffectTarget();
  _effectsScheduler->cancelAllEffectsFor(target);
}

//void G3MWidget::resetCameraPosition() {
//  getNextCamera()->resetPosition();
//}

void G3MWidget::setBackgroundColor(const Color& backgroundColor) {
  delete _backgroundColor;

  _backgroundColor = new Color(backgroundColor);
}
